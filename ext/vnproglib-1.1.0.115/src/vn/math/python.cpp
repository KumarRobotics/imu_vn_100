// VectorNav Programming Library v1.1.0.115
// Copyright (c) 2016 VectorNav Technologies, LLC
#include "vn/util/boostpython.h"

#include "vn/math/vector.h"
#include "vn/math/matrix.h"
#include "vn/math/conversions.h"
#include "vn/math/attitude.h"

using namespace boost::python;
using namespace vn::math;

BOOST_PYTHON_MODULE(_math)
{
	docstring_options local_docstring_options(true, true, false);
	class_<vec2f>("vec2f", "2-component vector using floats.")
		.def(init<float>())
		.def(init<float, float>())
		.def_readwrite("x", &vec2f::x)
		.def_readwrite("y", &vec2f::y)
		.def("dim", &vec2f::dim)
		.add_static_property("zero",   &vec2f::zero) 
		.add_static_property("one",    &vec2f::one)  
		.add_static_property("unit_x", &vec2f::unitX)
		.add_static_property("unit_y", &vec2f::unitY)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec2f::mag) 
		.def("norm", &vec2f::norm);

	class_<vec2d>("vec2d", "2-component vector using doubles.")
		.def(init<double>())
		.def(init<double, double>())
		.def_readwrite("x", &vec2d::x)
		.def_readwrite("y", &vec2d::y)
		.def("dim", &vec2d::dim)
		.add_static_property("zero",   &vec2d::zero) 
		.add_static_property("one",    &vec2d::one)  
		.add_static_property("unit_x", &vec2d::unitX)
		.add_static_property("unit_y", &vec2d::unitY)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec2d::mag) 
		.def("norm", &vec2d::norm);

	class_<vec2ld>("vec2ld", "2-component vector using long doubles.")
		.def(init<long double>())
		.def(init<long double, long double>())
		.def_readwrite("x", &vec2ld::x)
		.def_readwrite("y", &vec2ld::y)
		.def("dim", &vec2ld::dim)
		.add_static_property("zero",   &vec2ld::zero) 
		.add_static_property("one",    &vec2ld::one)  
		.add_static_property("unit_x", &vec2ld::unitX)
		.add_static_property("unit_y", &vec2ld::unitY)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec2ld::mag) 
		.def("norm", &vec2ld::norm);

	class_<vec2i32>("vec2i32", "2-component vector using int32_ts.")
		.def(init<int32_t>())
		.def(init<int32_t, int32_t>())
		.def_readwrite("x", &vec2i32::x)
		.def_readwrite("y", &vec2i32::y)
		.def("dim", &vec2i32::dim)
		.add_static_property("zero",   &vec2i32::zero) 
		.add_static_property("one",    &vec2i32::one)  
		.add_static_property("unit_x", &vec2i32::unitX)
		.add_static_property("unit_y", &vec2i32::unitY)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec2i32::mag) 
		.def("norm", &vec2i32::norm);

	class_<vec2u32>("vec2u32", "2-component vector using uint32_ts.")
		.def(init<uint32_t>())
		.def(init<uint32_t, uint32_t>())
		.def_readwrite("x", &vec2u32::x)
		.def_readwrite("y", &vec2u32::y)
		.def("dim", &vec2u32::dim)
		.add_static_property("zero",   &vec2u32::zero) 
		.add_static_property("one",    &vec2u32::one)  
		.add_static_property("unit_x", &vec2u32::unitX)
		.add_static_property("unit_y", &vec2u32::unitY)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec2u32::mag) 
		.def("norm", &vec2u32::norm);

	class_<vec3f>("vec3f", "3-component vector using floats.")
		.def(init<float>())
		.def(init<float, float, float>())
		.def_readwrite("x", &vec3f::x)
		.def_readwrite("y", &vec3f::y)
		.def_readwrite("z", &vec3f::z)
		.def_readwrite("r", &vec3f::r)
		.def_readwrite("g", &vec3f::g)
		.def_readwrite("b", &vec3f::b)
		.def("dim", &vec3f::dim)
		.add_static_property("zero",   &vec3f::zero) 
		.add_static_property("one",    &vec3f::one)  
		.add_static_property("unit_x", &vec3f::unitX)
		.add_static_property("unit_y", &vec3f::unitY)
		.add_static_property("unit_z", &vec3f::unitZ)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec3f::mag) 
		.def("norm", &vec3f::norm);

	class_<vec3d>("vec3d", "3-component vector using doubles.")
		.def(init<double>())
		.def(init<double, double, double>())
		.def_readwrite("x", &vec3d::x)
		.def_readwrite("y", &vec3d::y)
		.def_readwrite("z", &vec3d::z)
		.def_readwrite("r", &vec3d::r)
		.def_readwrite("g", &vec3d::g)
		.def_readwrite("b", &vec3d::b)
		.def("dim", &vec3d::dim)
		.add_static_property("zero",   &vec3d::zero) 
		.add_static_property("one",    &vec3d::one)  
		.add_static_property("unit_x", &vec3d::unitX)
		.add_static_property("unit_y", &vec3d::unitY)
		.add_static_property("unit_z", &vec3d::unitZ)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec3d::mag) 
		.def("norm", &vec3d::norm);

	class_<vec3ld>("vec3ld", "3-component vector using long doubles.")
		.def(init<long double>())
		.def(init<long double, long double, long double>())
		.def_readwrite("x", &vec3ld::x)
		.def_readwrite("y", &vec3ld::y)
		.def_readwrite("z", &vec3ld::z)
		.def_readwrite("r", &vec3ld::r)
		.def_readwrite("g", &vec3ld::g)
		.def_readwrite("b", &vec3ld::b)
		.def("dim", &vec3ld::dim)
		.add_static_property("zero",   &vec3ld::zero) 
		.add_static_property("one",    &vec3ld::one)  
		.add_static_property("unit_x", &vec3ld::unitX)
		.add_static_property("unit_y", &vec3ld::unitY)
		.add_static_property("unit_z", &vec3ld::unitZ)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec3ld::mag) 
		.def("norm", &vec3ld::norm);

	class_<vec3i32>("vec3i32", "3-component vector using int32_ts.")
		.def(init<int32_t>())
		.def(init<int32_t, int32_t, int32_t>())
		.def_readwrite("x", &vec3i32::x)
		.def_readwrite("y", &vec3i32::y)
		.def_readwrite("z", &vec3i32::z)
		.def_readwrite("r", &vec3i32::r)
		.def_readwrite("g", &vec3i32::g)
		.def_readwrite("b", &vec3i32::b)
		.def("dim", &vec3i32::dim)
		.add_static_property("zero",   &vec3i32::zero) 
		.add_static_property("one",    &vec3i32::one)  
		.add_static_property("unit_x", &vec3i32::unitX)
		.add_static_property("unit_y", &vec3i32::unitY)
		.add_static_property("unit_z", &vec3i32::unitZ)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec3i32::mag) 
		.def("norm", &vec3i32::norm);

	class_<vec3u32>("vec3u32", "3-component vector using uint32_ts.")
		.def(init<uint32_t>())
		.def(init<uint32_t, uint32_t, uint32_t>())
		.def_readwrite("x", &vec3u32::x)
		.def_readwrite("y", &vec3u32::y)
		.def_readwrite("z", &vec3u32::z)
		.def_readwrite("r", &vec3u32::r)
		.def_readwrite("g", &vec3u32::g)
		.def_readwrite("b", &vec3u32::b)
		.def("dim", &vec3u32::dim)
		.add_static_property("zero",   &vec3u32::zero) 
		.add_static_property("one",    &vec3u32::one)  
		.add_static_property("unit_x", &vec3u32::unitX)
		.add_static_property("unit_y", &vec3u32::unitY)
		.add_static_property("unit_z", &vec3u32::unitZ)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec3u32::mag) 
		.def("norm", &vec3u32::norm);

	class_<vec4f>("vec4f", "4-component vector using floats.")
		.def(init<float>())
		.def(init<float, float, float, float>())
		.def_readwrite("x", &vec4f::x)
		.def_readwrite("y", &vec4f::y)
		.def_readwrite("z", &vec4f::z)
		.def_readwrite("w", &vec4f::w)
		.def_readwrite("r", &vec4f::r)
		.def_readwrite("g", &vec4f::g)
		.def_readwrite("b", &vec4f::b)
		.def_readwrite("a", &vec4f::a)
		.def("dim", &vec4f::dim)
		.add_static_property("zero",   &vec4f::zero) 
		.add_static_property("one",    &vec4f::one)  
		.add_static_property("unit_x", &vec4f::unitX)
		.add_static_property("unit_y", &vec4f::unitY)
		.add_static_property("unit_z", &vec4f::unitZ)
		.add_static_property("unit_w", &vec4f::unitW)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec4f::mag) 
		.def("norm", &vec4f::norm);

	class_<vec4d>("vec4d", "4-component vector using doubles.")
		.def(init<double>())
		.def(init<double, double, double, double>())
		.def_readwrite("x", &vec4d::x)
		.def_readwrite("y", &vec4d::y)
		.def_readwrite("z", &vec4d::z)
		.def_readwrite("w", &vec4d::w)
		.def_readwrite("r", &vec4d::r)
		.def_readwrite("g", &vec4d::g)
		.def_readwrite("b", &vec4d::b)
		.def_readwrite("a", &vec4d::a)
		.def("dim", &vec4d::dim)
		.add_static_property("zero",   &vec4d::zero) 
		.add_static_property("one",    &vec4d::one)  
		.add_static_property("unit_x", &vec4d::unitX)
		.add_static_property("unit_y", &vec4d::unitY)
		.add_static_property("unit_z", &vec4d::unitZ)
		.add_static_property("unit_w", &vec4d::unitW)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec4d::mag) 
		.def("norm", &vec4d::norm);

	class_<vec4ld>("vec4ld", "4-component vector using long doubles.")
		.def(init<long double>())
		.def(init<long double, long double, long double, long double>())
		.def_readwrite("x", &vec4ld::x)
		.def_readwrite("y", &vec4ld::y)
		.def_readwrite("z", &vec4ld::z)
		.def_readwrite("w", &vec4ld::w)
		.def_readwrite("r", &vec4ld::r)
		.def_readwrite("g", &vec4ld::g)
		.def_readwrite("b", &vec4ld::b)
		.def_readwrite("a", &vec4ld::a)
		.def("dim", &vec4ld::dim)
		.add_static_property("zero",   &vec4ld::zero) 
		.add_static_property("one",    &vec4ld::one)  
		.add_static_property("unit_x", &vec4ld::unitX)
		.add_static_property("unit_y", &vec4ld::unitY)
		.add_static_property("unit_z", &vec4ld::unitZ)
		.add_static_property("unit_w", &vec4ld::unitW)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec4ld::mag) 
		.def("norm", &vec4ld::norm);

	class_<vec4i32>("vec4i32", "4-component vector using int32_ts.")
		.def(init<int32_t>())
		.def(init<int32_t, int32_t, int32_t, int32_t>())
		.def_readwrite("x", &vec4i32::x)
		.def_readwrite("y", &vec4i32::y)
		.def_readwrite("z", &vec4i32::z)
		.def_readwrite("w", &vec4i32::w)
		.def_readwrite("r", &vec4i32::r)
		.def_readwrite("g", &vec4i32::g)
		.def_readwrite("b", &vec4i32::b)
		.def_readwrite("a", &vec4i32::a)
		.def("dim", &vec4i32::dim)
		.add_static_property("zero",   &vec4i32::zero) 
		.add_static_property("one",    &vec4i32::one)  
		.add_static_property("unit_x", &vec4i32::unitX)
		.add_static_property("unit_y", &vec4i32::unitY)
		.add_static_property("unit_z", &vec4i32::unitZ)
		.add_static_property("unit_w", &vec4i32::unitW)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec4i32::mag) 
		.def("norm", &vec4i32::norm);

	class_<vec4u32>("vec4u32", "4-component vector using uint32_ts.")
		.def(init<uint32_t>())
		.def(init<uint32_t, uint32_t, uint32_t, uint32_t>())
		.def_readwrite("x", &vec4u32::x)
		.def_readwrite("y", &vec4u32::y)
		.def_readwrite("z", &vec4u32::z)
		.def_readwrite("w", &vec4u32::w)
		.def_readwrite("r", &vec4u32::r)
		.def_readwrite("g", &vec4u32::g)
		.def_readwrite("b", &vec4u32::b)
		.def_readwrite("a", &vec4u32::a)
		.def("dim", &vec4u32::dim)
		.add_static_property("zero",   &vec4u32::zero) 
		.add_static_property("one",    &vec4u32::one)  
		.add_static_property("unit_x", &vec4u32::unitX)
		.add_static_property("unit_y", &vec4u32::unitY)
		.add_static_property("unit_z", &vec4u32::unitZ)
		.add_static_property("unit_w", &vec4u32::unitW)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self * other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self * other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self * other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self * other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self * other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self * other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self * other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self * other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self * other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(-self)
		.def( "mag", &vec4u32::mag) 
		.def("norm", &vec4u32::norm);
	class_<mat2f>("mat2f", "2-component matrix using floats.")
		.def(init<float>())
		.def(init<vec2f, vec2f>())
		.def_readwrite("e00", &mat2f::e00)
		.def_readwrite("e01", &mat2f::e01)
		.def_readwrite("e10", &mat2f::e10)
		.def_readwrite("e11", &mat2f::e11)
		.def("dim_row", &mat2f::dimRow)
		.def("dim_col", &mat2f::dimCol)
		.add_static_property("zero",   &mat2f::zero) 
		.add_static_property("one",    &mat2f::one)  
		.add_static_property("identity", &mat2f::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat2f::copy<float>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat2f::copy<float>)
		.def(-self);

	class_<mat2d>("mat2d", "2-component matrix using doubles.")
		.def(init<double>())
		.def(init<vec2d, vec2d>())
		.def_readwrite("e00", &mat2d::e00)
		.def_readwrite("e01", &mat2d::e01)
		.def_readwrite("e10", &mat2d::e10)
		.def_readwrite("e11", &mat2d::e11)
		.def("dim_row", &mat2d::dimRow)
		.def("dim_col", &mat2d::dimCol)
		.add_static_property("zero",   &mat2d::zero) 
		.add_static_property("one",    &mat2d::one)  
		.add_static_property("identity", &mat2d::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat2d::copy<double>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat2d::copy<double>)
		.def(-self);

	class_<mat2ld>("mat2ld", "2-component matrix using long doubles.")
		.def(init<long double>())
		.def(init<vec2ld, vec2ld>())
		.def_readwrite("e00", &mat2ld::e00)
		.def_readwrite("e01", &mat2ld::e01)
		.def_readwrite("e10", &mat2ld::e10)
		.def_readwrite("e11", &mat2ld::e11)
		.def("dim_row", &mat2ld::dimRow)
		.def("dim_col", &mat2ld::dimCol)
		.add_static_property("zero",   &mat2ld::zero) 
		.add_static_property("one",    &mat2ld::one)  
		.add_static_property("identity", &mat2ld::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat2ld::copy<long double>)
		.def(-self);

	class_<mat3f>("mat3f", "3-component matrix using floats.")
		.def(init<float>())
		.def(init<vec3f, vec3f, vec3f>())
		.def_readwrite("e00", &mat3f::e00)
		.def_readwrite("e01", &mat3f::e01)
		.def_readwrite("e02", &mat3f::e02)
		.def_readwrite("e10", &mat3f::e10)
		.def_readwrite("e11", &mat3f::e11)
		.def_readwrite("e12", &mat3f::e12)
		.def_readwrite("e20", &mat3f::e20)
		.def_readwrite("e21", &mat3f::e21)
		.def_readwrite("e22", &mat3f::e22)
		.def("dim_row", &mat3f::dimRow)
		.def("dim_col", &mat3f::dimCol)
		.add_static_property("zero",   &mat3f::zero) 
		.add_static_property("one",    &mat3f::one)  
		.add_static_property("identity", &mat3f::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat3f::copy<float>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat3f::copy<float>)
		.def(-self);

	class_<mat3d>("mat3d", "3-component matrix using doubles.")
		.def(init<double>())
		.def(init<vec3d, vec3d, vec3d>())
		.def_readwrite("e00", &mat3d::e00)
		.def_readwrite("e01", &mat3d::e01)
		.def_readwrite("e02", &mat3d::e02)
		.def_readwrite("e10", &mat3d::e10)
		.def_readwrite("e11", &mat3d::e11)
		.def_readwrite("e12", &mat3d::e12)
		.def_readwrite("e20", &mat3d::e20)
		.def_readwrite("e21", &mat3d::e21)
		.def_readwrite("e22", &mat3d::e22)
		.def("dim_row", &mat3d::dimRow)
		.def("dim_col", &mat3d::dimCol)
		.add_static_property("zero",   &mat3d::zero) 
		.add_static_property("one",    &mat3d::one)  
		.add_static_property("identity", &mat3d::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat3d::copy<double>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat3d::copy<double>)
		.def(-self);

	class_<mat3ld>("mat3ld", "3-component matrix using long doubles.")
		.def(init<long double>())
		.def(init<vec3ld, vec3ld, vec3ld>())
		.def_readwrite("e00", &mat3ld::e00)
		.def_readwrite("e01", &mat3ld::e01)
		.def_readwrite("e02", &mat3ld::e02)
		.def_readwrite("e10", &mat3ld::e10)
		.def_readwrite("e11", &mat3ld::e11)
		.def_readwrite("e12", &mat3ld::e12)
		.def_readwrite("e20", &mat3ld::e20)
		.def_readwrite("e21", &mat3ld::e21)
		.def_readwrite("e22", &mat3ld::e22)
		.def("dim_row", &mat3ld::dimRow)
		.def("dim_col", &mat3ld::dimCol)
		.add_static_property("zero",   &mat3ld::zero) 
		.add_static_property("one",    &mat3ld::one)  
		.add_static_property("identity", &mat3ld::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat3ld::copy<long double>)
		.def(-self);

	class_<mat4f>("mat4f", "4-component matrix using floats.")
		.def(init<float>())
		.def(init<vec4f, vec4f, vec4f, vec4f>())
		.def_readwrite("e00", &mat4f::e00)
		.def_readwrite("e01", &mat4f::e01)
		.def_readwrite("e02", &mat4f::e02)
		.def_readwrite("e03", &mat4f::e03)
		.def_readwrite("e10", &mat4f::e10)
		.def_readwrite("e11", &mat4f::e11)
		.def_readwrite("e12", &mat4f::e12)
		.def_readwrite("e13", &mat4f::e13)
		.def_readwrite("e20", &mat4f::e20)
		.def_readwrite("e21", &mat4f::e21)
		.def_readwrite("e22", &mat4f::e22)
		.def_readwrite("e23", &mat4f::e23)
		.def_readwrite("e30", &mat4f::e30)
		.def_readwrite("e31", &mat4f::e31)
		.def_readwrite("e32", &mat4f::e32)
		.def_readwrite("e33", &mat4f::e33)
		.def("dim_row", &mat4f::dimRow)
		.def("dim_col", &mat4f::dimCol)
		.add_static_property("zero",   &mat4f::zero) 
		.add_static_property("one",    &mat4f::one)  
		.add_static_property("identity", &mat4f::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat4f::copy<float>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat4f::copy<float>)
		.def(-self);

	class_<mat4d>("mat4d", "4-component matrix using doubles.")
		.def(init<double>())
		.def(init<vec4d, vec4d, vec4d, vec4d>())
		.def_readwrite("e00", &mat4d::e00)
		.def_readwrite("e01", &mat4d::e01)
		.def_readwrite("e02", &mat4d::e02)
		.def_readwrite("e03", &mat4d::e03)
		.def_readwrite("e10", &mat4d::e10)
		.def_readwrite("e11", &mat4d::e11)
		.def_readwrite("e12", &mat4d::e12)
		.def_readwrite("e13", &mat4d::e13)
		.def_readwrite("e20", &mat4d::e20)
		.def_readwrite("e21", &mat4d::e21)
		.def_readwrite("e22", &mat4d::e22)
		.def_readwrite("e23", &mat4d::e23)
		.def_readwrite("e30", &mat4d::e30)
		.def_readwrite("e31", &mat4d::e31)
		.def_readwrite("e32", &mat4d::e32)
		.def_readwrite("e33", &mat4d::e33)
		.def("dim_row", &mat4d::dimRow)
		.def("dim_col", &mat4d::dimCol)
		.add_static_property("zero",   &mat4d::zero) 
		.add_static_property("one",    &mat4d::one)  
		.add_static_property("identity", &mat4d::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat4d::copy<double>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat4d::copy<double>)
		.def(-self);

	class_<mat4ld>("mat4ld", "4-component matrix using long doubles.")
		.def(init<long double>())
		.def(init<vec4ld, vec4ld, vec4ld, vec4ld>())
		.def_readwrite("e00", &mat4ld::e00)
		.def_readwrite("e01", &mat4ld::e01)
		.def_readwrite("e02", &mat4ld::e02)
		.def_readwrite("e03", &mat4ld::e03)
		.def_readwrite("e10", &mat4ld::e10)
		.def_readwrite("e11", &mat4ld::e11)
		.def_readwrite("e12", &mat4ld::e12)
		.def_readwrite("e13", &mat4ld::e13)
		.def_readwrite("e20", &mat4ld::e20)
		.def_readwrite("e21", &mat4ld::e21)
		.def_readwrite("e22", &mat4ld::e22)
		.def_readwrite("e23", &mat4ld::e23)
		.def_readwrite("e30", &mat4ld::e30)
		.def_readwrite("e31", &mat4ld::e31)
		.def_readwrite("e32", &mat4ld::e32)
		.def_readwrite("e33", &mat4ld::e33)
		.def("dim_row", &mat4ld::dimRow)
		.def("dim_col", &mat4ld::dimCol)
		.add_static_property("zero",   &mat4ld::zero) 
		.add_static_property("one",    &mat4ld::one)  
		.add_static_property("identity", &mat4ld::identity)
		.def(self_ns::str(self_ns::self))
		.def(self + self)
		.def(self - self)
		.def(self * self)
		.def(self += self)
		.def(self -= self)
		.def(self *= self)
		.def(self * other<float>())
		.def(self *= other<float>())
		.def(other<float>() * self)
		.def(self / other<float>())
		.def(self /= other<float>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<double>())
		.def(self *= other<double>())
		.def(other<double>() * self)
		.def(self / other<double>())
		.def(self /= other<double>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<int8_t>())
		.def(self *= other<int8_t>())
		.def(other<int8_t>() * self)
		.def(self / other<int8_t>())
		.def(self /= other<int8_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<int16_t>())
		.def(self *= other<int16_t>())
		.def(other<int16_t>() * self)
		.def(self / other<int16_t>())
		.def(self /= other<int16_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<int32_t>())
		.def(self *= other<int32_t>())
		.def(other<int32_t>() * self)
		.def(self / other<int32_t>())
		.def(self /= other<int32_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<int64_t>())
		.def(self *= other<int64_t>())
		.def(other<int64_t>() * self)
		.def(self / other<int64_t>())
		.def(self /= other<int64_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<uint8_t>())
		.def(self *= other<uint8_t>())
		.def(other<uint8_t>() * self)
		.def(self / other<uint8_t>())
		.def(self /= other<uint8_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<uint16_t>())
		.def(self *= other<uint16_t>())
		.def(other<uint16_t>() * self)
		.def(self / other<uint16_t>())
		.def(self /= other<uint16_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<uint32_t>())
		.def(self *= other<uint32_t>())
		.def(other<uint32_t>() * self)
		.def(self / other<uint32_t>())
		.def(self /= other<uint32_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(self * other<uint64_t>())
		.def(self *= other<uint64_t>())
		.def(other<uint64_t>() * self)
		.def(self / other<uint64_t>())
		.def(self /= other<uint64_t>())
		.def("copy", &mat4ld::copy<long double>)
		.def(-self);

	class_<AttitudeF>("AttitudeF", no_init)
		.def("no_rotation", &AttitudeF::noRotation).staticmethod("no_rotation")
		.def("from_quat", &AttitudeF::fromQuat).staticmethod("from_quat")
		.def("from_ypr_in_degs", &AttitudeF::fromYprInDegs).staticmethod("from_ypr_in_degs")
		.def("from_ypr_in_rads", &AttitudeF::fromYprInRads).staticmethod("from_ypr_in_rads")
		.def("from_dcm", &AttitudeF::fromDcm).staticmethod("from_dcm")
		.def_readonly("ypr_in_degs", &AttitudeF::yprInDegs)
		.def_readonly("ypr_in_rads", &AttitudeF::yprInRads)
		.def_readonly("quat", &AttitudeF::quat)
		.def_readonly("dcm", &AttitudeF::dcm)
		;

	def("deg2rad", static_cast<vec3f(*)(vec3f)>(deg2rad<3>));

	/// \brief Converts an angle in degrees to radians.
	///
	/// \param[in] angleInDegs The angle in degrees.
	/// \return The angle converted to radians.
	//float deg2rad(float angleInDegs);

	/// \brief Converts an angle in degrees to radians.
	///
	/// \param[in] angleInDegs The angle in degrees.
	/// \return The angle converted to radians.
	//double deg2rad(double angleInDegs);

	/// \brief Convers a vector of angles in degrees to radians.
	///
	/// \param[in] anglesInDegs The vector of angles in degrees.
	/// \return The converted angles.
	//template<size_t dim>
	//vec<dim, float> deg2rad(vec<dim> anglesInDegs)

	//class_<yprf>("yprf", "Yaw, pitch, roll using floats.", no_init)
	//	.def("from_degs", static_cast<yprf(*)(vec3f)>(&yprf::fromDegs)).staticmethod("from_degs")
	//	.def("to_vec3", &yprf::toVec3)
	//	;
	//.def("parse", static_cast<CompositeData(*)(Packet&)>(&CompositeData::parse)).staticmethod("parse")

}
